{"version":3,"file":"component---src-pages-jobs-tutorial-md-b4833a35f6f6dea721eb.js","mappings":"4RAQaA,EAAe,CAAC,EACvBC,EAAc,CAClBD,aAAAA,GAEIE,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,GACF,YACD,OAAO,SAACJ,GAAD,UAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAG5E,eACE,GAAM,uBADR,wBAGA,oHACA,+LACA,mGACA,eACE,GAAM,gDADR,iDAGA,0LACA,eACE,GAAM,kBADR,oBAGA,oBACE,eAAIC,WAAW,OACb,cAAGA,WAAW,MAAd,8EAAiG,uBAAYA,WAAW,KAAvB,qEAEnG,eAAIA,WAAW,OACb,cAAGA,WAAW,MAAd,4EAA+F,uBAAYA,WAAW,KAAvB,qEAGnG,eACE,GAAM,cADR,eAGA,gLACA,eACE,GAAM,oBADR,sBAGA,8CAA+B,uBAAYA,WAAW,KAAvB,kBAA/B,0GAAmM,uBAAYA,WAAW,KAAvB,kBAAnM,MACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBADZ,iPAcL,wHAAyG,uBAAYA,WAAW,KAAvB,kBAAzG,uEACA,eACE,GAAM,kBADR,oBAGA,8CAA+B,uBAAYA,WAAW,KAAvB,gBAA/B,qDACA,+DAAgD,uBAAYA,WAAW,KAAvB,UAAhD,yCAA2I,uBAAYA,WAAW,KAAvB,SAA3I,MAAkM,uBAAYA,WAAW,KAAvB,SAAlM,MAAyP,uBAAYA,WAAW,KAAvB,SAAzP,QAAkT,uBAAYA,WAAW,KAAvB,QAAlT,kFACA,kDAAmC,uBAAYA,WAAW,KAAvB,iBAAnC,QAAoG,uBAAYA,WAAW,KAAvB,kBAApG,gDAA8M,uBAAYA,WAAW,KAAvB,kBAA9M,gCAAwS,uBAAYA,WAAW,KAAvB,gBAAxS,gBACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBADZ,8KAaL,eACE,GAAM,mBADR,qBAGA,wEAAyD,uBAAYA,WAAW,KAAvB,sBAAzD,yDAAgL,uBAAYA,WAAW,KAAvB,gBAAhL,gBACA,6HAA8G,uBAAYA,WAAW,KAAvB,gBAA9G,iBAAuL,uBAAYA,WAAW,KAAvB,UAAvL,4DACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBADZ,8MAYL,eACE,GAAM,uBADR,wBAGA,2HACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBADZ,kwBAqCL,0DAA2C,uBAAYA,WAAW,KAAvB,kDAA3C,qJACA,eACE,GAAM,cADR,eAGA,iXACA,gGAGH,CAEDJ,EAAWK,gBAAiB,C","sources":["webpack://substance-3d-automation/./src/pages/jobs/tutorial.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/substance-3d-automation/substance-3d-automation/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"how-to-author-a-job\"\n    }}>{`How to author a job`}</h1>\n    <p>{`Adobe Substance 3D Automation Service REST API accepts job specifications as a JSON document.`}</p>\n    <p>{`This JSON document is authored by a user or developer to describe how this service should retrieve your assets, perform manipulations and rendering, and upload results.`}</p>\n    <p>{`This job description is specified as a directed acyclic graph of operations.`}</p>\n    <h2 {...{\n      \"id\": \"walk-through-on-how-to-write-a-rendering-job\"\n    }}>{`Walk-through on how to write a rendering job`}</h2>\n    <p>{`In this example, we'll describe how to write a job which requests this service to download a Stager scene, render a camera bookmark and upload the resulting image.`}</p>\n    <h3 {...{\n      \"id\": \"pre-requisites\"\n    }}>{`Pre-requisites:`}</h3>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`A stager scene, available as a pre-signed URL, such as this AWS S3 blob:  `}<inlineCode parentName=\"p\">{`https://some-bucket.s3.us-east-1.amazonaws.com/some/blob?TOKEN`}</inlineCode></p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`A pre-signed URL to upload the rendered image, such as this Azure Blob: `}<inlineCode parentName=\"p\">{`https://some.blob.core.windows.net/container/render.png?TOKEN`}</inlineCode></p>\n      </li>\n    </ol>\n    <h3 {...{\n      \"id\": \"operations\"\n    }}>{`Operations`}</h3>\n    <p>{`Let's write the operation we want the Substance 3D Automation Service to execute. We look at the API specs and determine the most appropriate operations.`}</p>\n    <h4 {...{\n      \"id\": \"1-download-scene\"\n    }}>{`1. Download scene`}</h4>\n    <p>{`We'll use the operation `}<inlineCode parentName=\"p\">{`https.download`}</inlineCode>{` to instruct the service on how to retrieve our Stager scene. We gave this specific operation a name, `}<inlineCode parentName=\"p\">{`step1-download`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`\"step1-download\": {\n  \"type\": \"https.download\",\n  \"parameters\": {\n    \"uri\": \"https://some-bucket.s3.us-east-1.amazonaws.com/some/blob?TOKEN\"\n   },\n   \"output\": {\n      \"type\": \"scene\",\n      \"extension\": \".ssg\"\n    }\n  }\n}\n`}</code></pre>\n    <p>{`Whenever we want to refer to the resulting file from this operation, we would use its' identifier `}<inlineCode parentName=\"p\">{`step1-download`}</inlineCode>{`. This is similar to variable assignment in programming languages.`}</p>\n    <h4 {...{\n      \"id\": \"2-render-scene\"\n    }}>{`2. Render scene`}</h4>\n    <p>{`We'll use the operation `}<inlineCode parentName=\"p\">{`scene.render`}</inlineCode>{` to render the default camera in a Stager scene.`}</p>\n    <p>{`Many operations, like this one, accept a `}<inlineCode parentName=\"p\">{`inputs`}</inlineCode>{` object, which is further typed into `}<inlineCode parentName=\"p\">{`scene`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`image`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`model`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`file`}</inlineCode>{`. Formats accepted for each of these types are described in the OpenAPI spec.`}</p>\n    <p>{`In this instance, we've set `}<inlineCode parentName=\"p\">{`.inputs.scene`}</inlineCode>{` to `}<inlineCode parentName=\"p\">{`step1-download`}</inlineCode>{`. This means the file produced in operation `}<inlineCode parentName=\"p\">{`step1-download`}</inlineCode>{` is used as an input to the `}<inlineCode parentName=\"p\">{`step2-render`}</inlineCode>{` operation.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`\"step2-render\": {\n  \"type\": \"scene.render\",\n  \"inputs\": {\n    \"scene\": \"step1-download\"\n  },\n  \"output\": {\n    \"type\": \"scene\",\n    \"extension\": \".ssg\"\n  }\n}\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"3-upload-result\"\n    }}>{`3. Upload result`}</h4>\n    <p>{`For uploading to Azure Blob, we use the operation `}<inlineCode parentName=\"p\">{`https.azure.upload`}</inlineCode>{`. If we were uploading to AWS S3, we'd use a generic `}<inlineCode parentName=\"p\">{`https.upload`}</inlineCode>{` operation.`}</p>\n    <p>{`Since we want to upload the rendering results, and knowing that render output is generated by the step `}<inlineCode parentName=\"p\">{`step2-render`}</inlineCode>{`, we set the `}<inlineCode parentName=\"p\">{`inputs`}</inlineCode>{` section of our upload operation to point to this file.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`\"step3-upload\": {\n  \"type\": \"https.azure.upload\",\n  \"parameters\": {\n    \"uri\": \"https://some.blob.core.windows.net/multi/second.png?TOKEN\"\n  },\n  \"inputs\": {\n    \"file\": \"step2-render\"\n  }\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"putting-it-together\"\n    }}>{`Putting it together`}</h3>\n    <p>{`With each of the operations written, we can now combine them into a full job description as follows:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"type\": \"multi.alpha\",\n  \"spec\": {\n    \"step1-download\": {\n      \"type\": \"https.download\",\n      \"parameters\": {\n        \"uri\": \"https://some-bucket.s3.us-east-1.amazonaws.com/some/blob?TOKEN\"\n      },\n      \"output\": {\n        \"type\": \"scene\",\n        \"extension\": \".ssg\"\n      }\n    },\n    \"step2-render\": {\n      \"type\": \"scene.render\",\n      \"inputs\": {\n        \"scene\": \"step1-download\"\n      },\n      \"output\": {\n        \"type\": \"image\",\n        \"extension\": \".png\"\n      }      \n    },\n    \"step3-upload\": {\n      \"type\": \"https.azure.upload\",\n      \"parameters\": {\n        \"uri\": \"https://some.blob.core.windows.net/multi/second.png?TOKEN\"\n      },\n      \"inputs\": {\n        \"file\": \"step2-render\"\n      }\n    }\n  }\n}\n`}</code></pre>\n    <p>{`This job, which will be executed as `}<inlineCode parentName=\"p\">{`step1-download -> step2-render -> step3-upload`}</inlineCode>{` can now be submitted to the Automation Service API. Once it completes, your render results will be available at the blob location you provided.`}</p>\n    <h2 {...{\n      \"id\": \"conclusion\"\n    }}>{`Conclusion`}</h2>\n    <p>{`We hope this walkthrough helped in understanding how to author jobs for Substance 3D Automation Service. Users are provided with the flexibility to construct job descriptios with fairly complex graphs, which can include any supported operation. This allows performing multiple renders, file conversions, imports and manipulations as a single job.`}</p>\n    <p>{`Check our API specifications for 4 examples of jobs of varying complexity.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}